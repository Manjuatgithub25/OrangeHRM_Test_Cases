{"name": "test_run", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <i data-v-bddebfba=\"\" data-v-10d463b7=\"\" class=\"oxd-icon bi-plus oxd-button-icon\"></i> is not clickable at point (700, 90). Other element would receive the click: <ul data-v-5327b38a=\"\">...</ul>\n  (Session info: chrome=128.0.6613.115)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6C4DDB5D2+29090]\n\t(No symbol) [0x00007FF6C4D4E689]\n\t(No symbol) [0x00007FF6C4C0B1CA]\n\t(No symbol) [0x00007FF6C4C66C0E]\n\t(No symbol) [0x00007FF6C4C64682]\n\t(No symbol) [0x00007FF6C4C61B9B]\n\t(No symbol) [0x00007FF6C4C60DB5]\n\t(No symbol) [0x00007FF6C4C52D61]\n\t(No symbol) [0x00007FF6C4C866EA]\n\t(No symbol) [0x00007FF6C4C526A6]\n\t(No symbol) [0x00007FF6C4C86900]\n\t(No symbol) [0x00007FF6C4CA65D9]\n\t(No symbol) [0x00007FF6C4C86493]\n\t(No symbol) [0x00007FF6C4C509B1]\n\t(No symbol) [0x00007FF6C4C51B11]\n\tGetHandleVerifier [0x00007FF6C50F8C5D+3295277]\n\tGetHandleVerifier [0x00007FF6C5144843+3605523]\n\tGetHandleVerifier [0x00007FF6C513A707+3564247]\n\tGetHandleVerifier [0x00007FF6C4E96EB6+797318]\n\t(No symbol) [0x00007FF6C4D5980F]\n\t(No symbol) [0x00007FF6C4D553F4]\n\t(No symbol) [0x00007FF6C4D55580]\n\t(No symbol) [0x00007FF6C4D44A1F]\n\tBaseThreadInitThunk [0x00007FFC2711257D+29]\n\tRtlUserThreadStart [0x00007FFC28A4AF28+40]", "trace": "self = <test.test_runner.Test object at 0x00000196A10DAF30>\n\n    def test_run(self):\n        login_logout = LoginLogout(self.driver)\n        user_management = login_logout.login()\n        user_management.add_user_credentials()\n        leave_page = user_management.delete_user_from_users_list()\n        Recruitment_page = leave_page.input_leave_details()\n        my_info_page = Recruitment_page.input_recruitment_details()\n        my_info_page.input_personal_details()\n>       my_info_page.add_attachment()\n\ntest\\test_runner.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage_objects\\test_my_info.py:50: in add_attachment\n    self.click_on_element(self.attachments)\nutilities\\generic_methods.py:19: in click_on_element\n    self.driver.find_element(*locator_and_value).click()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001969F7E8350>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6C4D44A1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC2711257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC28A4AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <i data-v-bddebfba=\"\" data-v-10d463b7=\"\" class=\"oxd-icon bi-plus oxd-button-icon\"></i> is not clickable at point (700, 90). Other element would receive the click: <ul data-v-5327b38a=\"\">...</ul>\nE         (Session info: chrome=128.0.6613.115)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6C4DDB5D2+29090]\nE       \t(No symbol) [0x00007FF6C4D4E689]\nE       \t(No symbol) [0x00007FF6C4C0B1CA]\nE       \t(No symbol) [0x00007FF6C4C66C0E]\nE       \t(No symbol) [0x00007FF6C4C64682]\nE       \t(No symbol) [0x00007FF6C4C61B9B]\nE       \t(No symbol) [0x00007FF6C4C60DB5]\nE       \t(No symbol) [0x00007FF6C4C52D61]\nE       \t(No symbol) [0x00007FF6C4C866EA]\nE       \t(No symbol) [0x00007FF6C4C526A6]\nE       \t(No symbol) [0x00007FF6C4C86900]\nE       \t(No symbol) [0x00007FF6C4CA65D9]\nE       \t(No symbol) [0x00007FF6C4C86493]\nE       \t(No symbol) [0x00007FF6C4C509B1]\nE       \t(No symbol) [0x00007FF6C4C51B11]\nE       \tGetHandleVerifier [0x00007FF6C50F8C5D+3295277]\nE       \tGetHandleVerifier [0x00007FF6C5144843+3605523]\nE       \tGetHandleVerifier [0x00007FF6C513A707+3564247]\nE       \tGetHandleVerifier [0x00007FF6C4E96EB6+797318]\nE       \t(No symbol) [0x00007FF6C4D5980F]\nE       \t(No symbol) [0x00007FF6C4D553F4]\nE       \t(No symbol) [0x00007FF6C4D55580]\nE       \t(No symbol) [0x00007FF6C4D44A1F]\nE       \tBaseThreadInitThunk [0x00007FFC2711257D+29]\nE       \tRtlUserThreadStart [0x00007FFC28A4AF28+40]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "steps": [{"name": "login to the application", "status": "passed", "attachments": [{"name": "login", "source": "b344e440-63dd-48ea-a832-12ef6d402774-attachment.png", "type": "image/png"}], "start": 1725512907976, "stop": 1725512910495}, {"name": "user_added", "status": "passed", "attachments": [{"name": "Successfully_added_user", "source": "1f0fe7fd-179c-4194-a103-757e926ce246-attachment.png", "type": "image/png"}], "start": 1725512922783, "stop": 1725512923002}, {"name": "Added Recruitment", "status": "passed", "attachments": [{"name": "Successfully added recruitment to list", "source": "aef682d3-1c8f-4762-9b8e-cf7e8c66e0b5-attachment.png", "type": "image/png"}], "start": 1725512954642, "stop": 1725512954829}], "start": 1725512906482, "stop": 1725512979561, "uuid": "05a3411c-f6dd-46b2-9e4d-fa28527a2652", "historyId": "6b44242b3c1c0ec424b15722f4675909", "testCaseId": "6b44242b3c1c0ec424b15722f4675909", "fullName": "test.test_runner.Test#test_run", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_runner"}, {"name": "subSuite", "value": "Test"}, {"name": "host", "value": "LAPTOP-1L6QCUMU"}, {"name": "thread", "value": "21168-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_runner"}]}