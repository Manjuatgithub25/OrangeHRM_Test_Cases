{"name": "test_run", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=128.0.6613.115)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6C4DDB5D2+29090]\n\t(No symbol) [0x00007FF6C4D4E689]\n\t(No symbol) [0x00007FF6C4C0B1CA]\n\t(No symbol) [0x00007FF6C4BDFAF5]\n\t(No symbol) [0x00007FF6C4C8E2E7]\n\t(No symbol) [0x00007FF6C4CA5EE1]\n\t(No symbol) [0x00007FF6C4C86493]\n\t(No symbol) [0x00007FF6C4C509B1]\n\t(No symbol) [0x00007FF6C4C51B11]\n\tGetHandleVerifier [0x00007FF6C50F8C5D+3295277]\n\tGetHandleVerifier [0x00007FF6C5144843+3605523]\n\tGetHandleVerifier [0x00007FF6C513A707+3564247]\n\tGetHandleVerifier [0x00007FF6C4E96EB6+797318]\n\t(No symbol) [0x00007FF6C4D5980F]\n\t(No symbol) [0x00007FF6C4D553F4]\n\t(No symbol) [0x00007FF6C4D55580]\n\t(No symbol) [0x00007FF6C4D44A1F]\n\tBaseThreadInitThunk [0x00007FFC2711257D+29]\n\tRtlUserThreadStart [0x00007FFC28A4AF28+40]", "trace": "request = <SubRequest 'setup' for <Function test_run>>\n\n    @pytest.fixture(scope=\"class\")\n    def setup(request):\n        timestamp = datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\n        home_dir = get_config(\"path\", \"home_dir\") + '\\\\downloads'\n        download_dir = os.path.join(home_dir, f\"downloaded_file_{timestamp}\")\n        os.makedirs(download_dir, exist_ok=True)\n        browser_name = request.config.getoption(\"--browser_name\").lower()\n        if browser_name == \"chrome\":\n            option = webdriver.ChromeOptions()\n            option.add_experimental_option(\"prefs\", {\n                \"download.default_directory\": download_dir,\n                \"download.prompt_for_download\": False,\n                \"directory_upgrade\": True,\n                \"detach\": True\n            })\n            driver = webdriver.Chrome(options=option)\n        elif browser_name == \"edge\":\n            option = webdriver.EdgeOptions()\n            option.add_experimental_option(\"detach\", True)\n            driver = webdriver.Edge()\n        else:\n            return \"Invalid browser\"\n    \n        driver.get(\"https://opensource-demo.orangehrmlive.com/\")\n>       driver.maximize_window()\n\nconftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\manju\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:506: in maximize_window\n    self.execute(command, None)\nC:\\Users\\manju\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C37ED07920>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF6C4D44A1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC2711257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC28A4AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=128.0.6613.115)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6C4DDB5D2+29090]\nE       \t(No symbol) [0x00007FF6C4D4E689]\nE       \t(No symbol) [0x00007FF6C4C0B1CA]\nE       \t(No symbol) [0x00007FF6C4BDFAF5]\nE       \t(No symbol) [0x00007FF6C4C8E2E7]\nE       \t(No symbol) [0x00007FF6C4CA5EE1]\nE       \t(No symbol) [0x00007FF6C4C86493]\nE       \t(No symbol) [0x00007FF6C4C509B1]\nE       \t(No symbol) [0x00007FF6C4C51B11]\nE       \tGetHandleVerifier [0x00007FF6C50F8C5D+3295277]\nE       \tGetHandleVerifier [0x00007FF6C5144843+3605523]\nE       \tGetHandleVerifier [0x00007FF6C513A707+3564247]\nE       \tGetHandleVerifier [0x00007FF6C4E96EB6+797318]\nE       \t(No symbol) [0x00007FF6C4D5980F]\nE       \t(No symbol) [0x00007FF6C4D553F4]\nE       \t(No symbol) [0x00007FF6C4D55580]\nE       \t(No symbol) [0x00007FF6C4D44A1F]\nE       \tBaseThreadInitThunk [0x00007FFC2711257D+29]\nE       \tRtlUserThreadStart [0x00007FFC28A4AF28+40]\n\nC:\\Users\\manju\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "start": 1725508358054, "stop": 1725508358054, "uuid": "3bfad90b-7190-497a-9879-d27cf2e109df", "historyId": "fbda50be7b9b9a0d0ef3f37d4cb58701", "testCaseId": "fbda50be7b9b9a0d0ef3f37d4cb58701", "fullName": "test_runner.Test#test_run", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "suite", "value": "test_runner"}, {"name": "subSuite", "value": "Test"}, {"name": "host", "value": "LAPTOP-1L6QCUMU"}, {"name": "thread", "value": "23424-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_runner"}]}