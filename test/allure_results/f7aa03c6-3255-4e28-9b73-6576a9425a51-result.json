{"name": "test_run", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=128.0.6613.85)\nStacktrace:\n\tGetHandleVerifier [0x00007FF65363B632+29090]\n\t(No symbol) [0x00007FF6535AE6E9]\n\t(No symbol) [0x00007FF65346B1CA]\n\t(No symbol) [0x00007FF6534BE5B3]\n\t(No symbol) [0x00007FF6534BF22C]\n\t(No symbol) [0x00007FF6535097F7]\n\t(No symbol) [0x00007FF6534E672F]\n\t(No symbol) [0x00007FF6535065D9]\n\t(No symbol) [0x00007FF6534E6493]\n\t(No symbol) [0x00007FF6534B09B1]\n\t(No symbol) [0x00007FF6534B1B11]\n\tGetHandleVerifier [0x00007FF65395881D+3294093]\n\tGetHandleVerifier [0x00007FF6539A4403+3604339]\n\tGetHandleVerifier [0x00007FF65399A2C7+3563063]\n\tGetHandleVerifier [0x00007FF6536F6F16+797318]\n\t(No symbol) [0x00007FF6535B986F]\n\t(No symbol) [0x00007FF6535B5454]\n\t(No symbol) [0x00007FF6535B55E0]\n\t(No symbol) [0x00007FF6535A4A7F]\n\tBaseThreadInitThunk [0x00007FFC2711257D+29]\n\tRtlUserThreadStart [0x00007FFC28A4AF28+40]", "trace": "self = <test.test_runner.Test object at 0x000001759EE742C0>\n\n    def test_run(self):\n    \n        login_logout = LoginLogout(self.driver)\n        user_management = login_logout.login()\n        user_management.click_admin()\n        user_management.system_user_verification(self.system_users)\n        user_management.add_user_btn()\n        user_management.add_user_credentials(self.emp_name, self.user_input, self.input_pw, self.input_confirm_pw,\n                                             self.added_user_step_name, self.added_user_screenshot_name,\n                                             self.expected_add_user_success_msg)\n        leave_page = user_management.delete_user_from_users_list(self.user_input, self.expected_delete_user_success_msg)\n        leave_page.click_on_leave()\n>       leave_page.input_leave_details()\n\ntest_runner.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\page_objects\\test_leave.py:14: in input_leave_details\n    form = self.driver.find_element(self.switch_to_leave_form)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001759EF33170>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'using\\' must be a string...07FF6535A4A7F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC2711257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC28A4AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\nE         (Session info: chrome=128.0.6613.85)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF65363B632+29090]\nE       \t(No symbol) [0x00007FF6535AE6E9]\nE       \t(No symbol) [0x00007FF65346B1CA]\nE       \t(No symbol) [0x00007FF6534BE5B3]\nE       \t(No symbol) [0x00007FF6534BF22C]\nE       \t(No symbol) [0x00007FF6535097F7]\nE       \t(No symbol) [0x00007FF6534E672F]\nE       \t(No symbol) [0x00007FF6535065D9]\nE       \t(No symbol) [0x00007FF6534E6493]\nE       \t(No symbol) [0x00007FF6534B09B1]\nE       \t(No symbol) [0x00007FF6534B1B11]\nE       \tGetHandleVerifier [0x00007FF65395881D+3294093]\nE       \tGetHandleVerifier [0x00007FF6539A4403+3604339]\nE       \tGetHandleVerifier [0x00007FF65399A2C7+3563063]\nE       \tGetHandleVerifier [0x00007FF6536F6F16+797318]\nE       \t(No symbol) [0x00007FF6535B986F]\nE       \t(No symbol) [0x00007FF6535B5454]\nE       \t(No symbol) [0x00007FF6535B55E0]\nE       \t(No symbol) [0x00007FF6535A4A7F]\nE       \tBaseThreadInitThunk [0x00007FFC2711257D+29]\nE       \tRtlUserThreadStart [0x00007FFC28A4AF28+40]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "steps": [{"name": "user added", "status": "passed", "attachments": [{"name": "Successfully added user", "source": "1d3311f3-2396-4887-83d2-75088c815778-attachment.png", "type": "image/png"}], "start": 1724847252202, "stop": 1724847252364}], "start": 1724847239639, "stop": 1724847255452, "uuid": "079f9fd6-1c71-4174-afff-81e380e366b0", "historyId": "fbda50be7b9b9a0d0ef3f37d4cb58701", "testCaseId": "fbda50be7b9b9a0d0ef3f37d4cb58701", "fullName": "test_runner.Test#test_run", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "suite", "value": "test_runner"}, {"name": "subSuite", "value": "Test"}, {"name": "host", "value": "LAPTOP-1L6QCUMU"}, {"name": "thread", "value": "9596-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_runner"}]}