{"uid":"28661bcff8b1375a","name":"test_run","fullName":"test.test_runner.Test#test_run","historyId":"6b44242b3c1c0ec424b15722f4675909","time":{"start":1725874681803,"stop":1725874699377,"duration":17574},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-v-67d2aedf=\"\" clear=\"false\" class=\"oxd-select-text-input\" tabindex=\"0\">...</div> is not clickable at point (588, 51). Other element would receive the click: <div data-v-c286b6e5=\"\" class=\"oxd-topbar-header-title\">...</div>\n  (Session info: chrome=128.0.6613.120)\nStacktrace:\n\tGetHandleVerifier [0x00007FF79FECB5D2+29090]\n\t(No symbol) [0x00007FF79FE3E689]\n\t(No symbol) [0x00007FF79FCFB1CA]\n\t(No symbol) [0x00007FF79FD56C0E]\n\t(No symbol) [0x00007FF79FD54682]\n\t(No symbol) [0x00007FF79FD51B9B]\n\t(No symbol) [0x00007FF79FD50DB5]\n\t(No symbol) [0x00007FF79FD42D61]\n\t(No symbol) [0x00007FF79FD766EA]\n\t(No symbol) [0x00007FF79FD426A6]\n\t(No symbol) [0x00007FF79FD76900]\n\t(No symbol) [0x00007FF79FD965D9]\n\t(No symbol) [0x00007FF79FD76493]\n\t(No symbol) [0x00007FF79FD409B1]\n\t(No symbol) [0x00007FF79FD41B11]\n\tGetHandleVerifier [0x00007FF7A01E8C5D+3295277]\n\tGetHandleVerifier [0x00007FF7A0234843+3605523]\n\tGetHandleVerifier [0x00007FF7A022A707+3564247]\n\tGetHandleVerifier [0x00007FF79FF86EB6+797318]\n\t(No symbol) [0x00007FF79FE4980F]\n\t(No symbol) [0x00007FF79FE453F4]\n\t(No symbol) [0x00007FF79FE45580]\n\t(No symbol) [0x00007FF79FE34A1F]\n\tBaseThreadInitThunk [0x00007FFC2711257D+29]\n\tRtlUserThreadStart [0x00007FFC28A4AF28+40]","statusTrace":"self = <test.test_runner.Test object at 0x000002408C3C8E00>\n\n    def test_run(self):\n        login_logout = LoginLogout(self.driver)\n        user_management = login_logout.login()\n        '''user_management.add_user_credentials()\n        leave_page = user_management.delete_user_from_users_list()\n        Recruitment_page = leave_page.input_leave_details()\n        my_info_page = Recruitment_page.input_recruitment_details()'''\n        my_info_page = MyInfo(self.driver)\n>       my_info_page.input_personal_details()\n\ntest\\test_runner.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects\\test_my_info.py:34: in input_personal_details\n    nationality_options.click()\nC:\\Users\\manju\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\manju\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\manju\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000240FFE37B90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF79FE34A1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC2711257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC28A4AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-v-67d2aedf=\"\" clear=\"false\" class=\"oxd-select-text-input\" tabindex=\"0\">...</div> is not clickable at point (588, 51). Other element would receive the click: <div data-v-c286b6e5=\"\" class=\"oxd-topbar-header-title\">...</div>\nE         (Session info: chrome=128.0.6613.120)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF79FECB5D2+29090]\nE       \t(No symbol) [0x00007FF79FE3E689]\nE       \t(No symbol) [0x00007FF79FCFB1CA]\nE       \t(No symbol) [0x00007FF79FD56C0E]\nE       \t(No symbol) [0x00007FF79FD54682]\nE       \t(No symbol) [0x00007FF79FD51B9B]\nE       \t(No symbol) [0x00007FF79FD50DB5]\nE       \t(No symbol) [0x00007FF79FD42D61]\nE       \t(No symbol) [0x00007FF79FD766EA]\nE       \t(No symbol) [0x00007FF79FD426A6]\nE       \t(No symbol) [0x00007FF79FD76900]\nE       \t(No symbol) [0x00007FF79FD965D9]\nE       \t(No symbol) [0x00007FF79FD76493]\nE       \t(No symbol) [0x00007FF79FD409B1]\nE       \t(No symbol) [0x00007FF79FD41B11]\nE       \tGetHandleVerifier [0x00007FF7A01E8C5D+3295277]\nE       \tGetHandleVerifier [0x00007FF7A0234843+3605523]\nE       \tGetHandleVerifier [0x00007FF7A022A707+3564247]\nE       \tGetHandleVerifier [0x00007FF79FF86EB6+797318]\nE       \t(No symbol) [0x00007FF79FE4980F]\nE       \t(No symbol) [0x00007FF79FE453F4]\nE       \t(No symbol) [0x00007FF79FE45580]\nE       \t(No symbol) [0x00007FF79FE34A1F]\nE       \tBaseThreadInitThunk [0x00007FFC2711257D+29]\nE       \tRtlUserThreadStart [0x00007FFC28A4AF28+40]\n\nC:\\Users\\manju\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1725874666975,"stop":1725874681803,"duration":14828},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-v-67d2aedf=\"\" clear=\"false\" class=\"oxd-select-text-input\" tabindex=\"0\">...</div> is not clickable at point (588, 51). Other element would receive the click: <div data-v-c286b6e5=\"\" class=\"oxd-topbar-header-title\">...</div>\n  (Session info: chrome=128.0.6613.120)\nStacktrace:\n\tGetHandleVerifier [0x00007FF79FECB5D2+29090]\n\t(No symbol) [0x00007FF79FE3E689]\n\t(No symbol) [0x00007FF79FCFB1CA]\n\t(No symbol) [0x00007FF79FD56C0E]\n\t(No symbol) [0x00007FF79FD54682]\n\t(No symbol) [0x00007FF79FD51B9B]\n\t(No symbol) [0x00007FF79FD50DB5]\n\t(No symbol) [0x00007FF79FD42D61]\n\t(No symbol) [0x00007FF79FD766EA]\n\t(No symbol) [0x00007FF79FD426A6]\n\t(No symbol) [0x00007FF79FD76900]\n\t(No symbol) [0x00007FF79FD965D9]\n\t(No symbol) [0x00007FF79FD76493]\n\t(No symbol) [0x00007FF79FD409B1]\n\t(No symbol) [0x00007FF79FD41B11]\n\tGetHandleVerifier [0x00007FF7A01E8C5D+3295277]\n\tGetHandleVerifier [0x00007FF7A0234843+3605523]\n\tGetHandleVerifier [0x00007FF7A022A707+3564247]\n\tGetHandleVerifier [0x00007FF79FF86EB6+797318]\n\t(No symbol) [0x00007FF79FE4980F]\n\t(No symbol) [0x00007FF79FE453F4]\n\t(No symbol) [0x00007FF79FE45580]\n\t(No symbol) [0x00007FF79FE34A1F]\n\tBaseThreadInitThunk [0x00007FFC2711257D+29]\n\tRtlUserThreadStart [0x00007FFC28A4AF28+40]","statusTrace":"self = <test.test_runner.Test object at 0x000002408C3C8E00>\n\n    def test_run(self):\n        login_logout = LoginLogout(self.driver)\n        user_management = login_logout.login()\n        '''user_management.add_user_credentials()\n        leave_page = user_management.delete_user_from_users_list()\n        Recruitment_page = leave_page.input_leave_details()\n        my_info_page = Recruitment_page.input_recruitment_details()'''\n        my_info_page = MyInfo(self.driver)\n>       my_info_page.input_personal_details()\n\ntest\\test_runner.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects\\test_my_info.py:34: in input_personal_details\n    nationality_options.click()\nC:\\Users\\manju\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\manju\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\manju\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000240FFE37B90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF79FE34A1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC2711257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC28A4AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-v-67d2aedf=\"\" clear=\"false\" class=\"oxd-select-text-input\" tabindex=\"0\">...</div> is not clickable at point (588, 51). Other element would receive the click: <div data-v-c286b6e5=\"\" class=\"oxd-topbar-header-title\">...</div>\nE         (Session info: chrome=128.0.6613.120)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF79FECB5D2+29090]\nE       \t(No symbol) [0x00007FF79FE3E689]\nE       \t(No symbol) [0x00007FF79FCFB1CA]\nE       \t(No symbol) [0x00007FF79FD56C0E]\nE       \t(No symbol) [0x00007FF79FD54682]\nE       \t(No symbol) [0x00007FF79FD51B9B]\nE       \t(No symbol) [0x00007FF79FD50DB5]\nE       \t(No symbol) [0x00007FF79FD42D61]\nE       \t(No symbol) [0x00007FF79FD766EA]\nE       \t(No symbol) [0x00007FF79FD426A6]\nE       \t(No symbol) [0x00007FF79FD76900]\nE       \t(No symbol) [0x00007FF79FD965D9]\nE       \t(No symbol) [0x00007FF79FD76493]\nE       \t(No symbol) [0x00007FF79FD409B1]\nE       \t(No symbol) [0x00007FF79FD41B11]\nE       \tGetHandleVerifier [0x00007FF7A01E8C5D+3295277]\nE       \tGetHandleVerifier [0x00007FF7A0234843+3605523]\nE       \tGetHandleVerifier [0x00007FF7A022A707+3564247]\nE       \tGetHandleVerifier [0x00007FF79FF86EB6+797318]\nE       \t(No symbol) [0x00007FF79FE4980F]\nE       \t(No symbol) [0x00007FF79FE453F4]\nE       \t(No symbol) [0x00007FF79FE45580]\nE       \t(No symbol) [0x00007FF79FE34A1F]\nE       \tBaseThreadInitThunk [0x00007FFC2711257D+29]\nE       \tRtlUserThreadStart [0x00007FFC28A4AF28+40]\n\nC:\\Users\\manju\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"login to the application","time":{"start":1725874682855,"stop":1725874686417,"duration":3562},"status":"passed","steps":[],"attachments":[{"uid":"9de5db5cab4fb35f","name":"login","source":"9de5db5cab4fb35f.png","type":"image/png","size":86080}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1725874700058,"stop":1725874700178,"duration":120},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('setup')"},{"name":"parentSuite","value":"test"},{"name":"suite","value":"test_runner"},{"name":"subSuite","value":"Test"},{"name":"host","value":"LAPTOP-1L6QCUMU"},{"name":"thread","value":"20624-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_runner"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('setup')"]},"source":"28661bcff8b1375a.json","parameterValues":[]}